@{
    if (this.Costs == null)
    {
        this.Costs = this.BuildCost.Items;
    }

    var hasDroneCost = this.BuildCost?.Labor > 0;
    var costsCount = this.Costs.Count();
    if (hasDroneCost)
    {
        costsCount++;
    }
    var colspan = Math.Max(costsCount, 1);

    <table class="table">
        <thead>
            <tr>
                <th scope="col" colspan="@colspan">Materials Needed</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                @{
                    if (costsCount == 0)
                    {
                        <td>@this.EmptyText</td>
                    }
                    else
                    {
                        if (hasDroneCost)
                        {
                            var laborItem = this.Game.ItemStorage.BaseApItem;
                            var laborItemData = this.Game.ItemStorage.BaseApItemData;

                            <RoomBuildCostEntry Name="@laborItem.Name" AvailableCount="@laborItemData.Count" NeededCount="@this.BuildCost.Labor" />
                        }

                        foreach (var cost in this.Costs)
                        {
                            if (this.Game.ItemStorage.TryGetItem(cost.ItemId, out Item item) &&
                                this.Game.ItemStorage.TryGetItemData(cost.ItemId, out ItemData itemData))
                            {
                                <RoomBuildCostEntry Name="@item.Name" AvailableCount="@itemData.Count" NeededCount="cost.Count" />
                            }
                            else
                            {
                                throw new Exception("item not found");
                            }
                        }
                    }
                }
            </tr>
        </tbody>
    </table>
}

@code {
    [CascadingParameter] public Game Game { get; set; }
    [CascadingParameter] public BuildCost BuildCost { get; set; }
    [CascadingParameter] public IEnumerable<Cost> Costs { get; set; }
    [Parameter] public string EmptyText { get; set; }
}
