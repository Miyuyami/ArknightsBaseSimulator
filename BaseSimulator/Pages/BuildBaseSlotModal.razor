@inject IModalService ModalService
@inject IJSRuntime JSRuntime

<div class="container-fluid d-flex flex-column" style="width: 80em; height: 20em;">
    <CascadingValue Value="@this.Game">
        @{
            <div class="row h-100 m-3">
                <div class="col">
                    <div id="BuildRoomCarousel" class="carousel slide h-100 d-flex justify-content-center" data-interval="false" @ref="@Carousel">
                        <div class="carousel-inner w-60">
                            @for (int i = 0; i < this.PossibleRoomsList.Count; i++)
                            {
                                var r = this.PossibleRoomsList[i];
                                string activeClass = i == 0 ? "active" : "";

                                <div class="carousel-item @activeClass">
                                    <div class="d-block w-100">
                                        <CascadingValue Value="@r">
                                            <div class="border-light">
                                                <BuildNewRoom />
                                            </div>

                                            @if (!this.Game.DoesMeetBuildNewRequirements(r))
                                            {
                                                <div class="overlay text-center d-flex flex-column justify-content-center text-white">
                                                    <BuildNewRequirements IsDark="true" />
                                                </div>
                                            }
                                        </CascadingValue>
                                    </div>
                                </div>
                            }
                        </div>
                        <a class="carousel-control-prev" href="#BuildRoomCarousel" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#BuildRoomCarousel" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col btn btn-dark m-1" @onclick="Cancel">
                    ❌ Cancel
                </div>
                <div class="col btn btn-dark m-1" @onclick="Confirm">
                    ✔ Confirm
                </div>
            </div>
        }
    </CascadingValue>
</div>

@code {
    private ElementReference Carousel;
    private int SelectedIndex = 0;

    [CascadingParameter] private ModalParameters Parameters { get; set; }

    public Game Game { get; set; }
    public EmptySlotData Data { get; set; }
    private List<Room> PossibleRoomsList;

    protected override void OnInitialized()
    {
        this.Game = this.Parameters.Get<Game>("Game");
        this.Data = this.Parameters.Get<EmptySlotData>("Data");

        this.PossibleRoomsList = this.Game.GetPossibleBuildRooms(this.Data).ToList();
    }

    private void Confirm()
    {
        if (!this.Game.TryBuild(this.Data, this.PossibleRoomsList[this.SelectedIndex]))
        {
            throw new Exception("failed to build in slot");
        }

        this.ModalService.Close(ModalResult.Ok<bool>(true));
    }

    private void Cancel()
    {
        this.ModalService.Cancel();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await this.JSRuntime.InvokeVoidAsync("SetOnCarouselSlid", this.Carousel, DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void OnCarouselSlid(int index)
    {
        this.SelectedIndex = index;
    }
}
