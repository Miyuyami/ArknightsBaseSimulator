@page "/"

@using Blazored.LocalStorage

@inject GameService GameService
@inject ILocalStorageService LocalStorage

<link rel="stylesheet" href="/css/base.css" />

@if (this.Game == null)
{
    <div class="row h-100">
        <h1 class="col m-auto text-center">Loading...</h1>
    </div>
}
else
{
    <div class="mt-5 position-relative">
        <div class="base-menu position-fixed">
            <BaseMenu @ref="@this.BaseMenu" OnBuildModeChanged="@this.OnBuildModeChanged" />
        </div>
        <div class="base">
            @{
                var maxLayoutHeight = this.Game.MaxLayoutHeight;

                foreach (var slot in this.Game.SaveData.Slots)
                {
                    <BaseSlot Id="@slot.Key" Data="@slot.Value" Game="@this.Game" IsInBuildMode="@this.IsInBuildMode" OnClick="@OnClickSlot" />
                }
            }
        </div>
    </div>
}

@code {
    private const string SaveQueryKey = "data";

    private bool IsInBuildMode { get; set; }

    private Game Game;
    private BaseMenu BaseMenu;

    private async Task OnClickSlot(SlotData slotData)
    {
        if (true)
        {
            //this.Game.Build(slot);
        }
        else
        {

        }

        //await this.UpdateSaveAsync();
    }

    private void OnBuildModeChanged(bool state)
    {
        this.IsInBuildMode = state;
    }

    private async Task UpdateSaveAsync()
    {
        var saveData = this.GameService.Serialize(this.Game);
        await this.LocalStorage.SetItemAsync(SaveQueryKey, saveData);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var saveData = await this.LocalStorage.GetItemAsync<string>(SaveQueryKey);

            this.Game = this.GameService.CreateGame(saveData);

            this.StateHasChanged();
        }
    }
}
