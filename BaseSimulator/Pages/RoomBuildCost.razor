@{
    int colspan;
    switch (this.Room.Id)
    {
        case RoomType.Corridor:
        case RoomType.Elevator:
            var cleanCosts = this.Game.GetCleanCosts(this.Slot).ToList();
            var cleanCostsCount = cleanCosts.Where(c => c.Count > 0).Count();
            colspan = Math.Max(cleanCostsCount, 1);

            <div class="row">
                <div class="col">
                    Consume the following materials to clean the room?
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col" colspan="@colspan">Materials Needed</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @{
                                    if (cleanCostsCount == 0)
                                    {
                                        <td>No cost. Cleaning is free.</td>
                                    }
                                    else
                                    {
                                        foreach (var cleanCost in cleanCosts)
                                        {
                                            var itemCount = this.Game.GetItemCount(cleanCost.ItemId);
                                            var itemName = this.Game.GetItemName(cleanCost.ItemId);

                                            <RoomBuildCostEntry Name="@itemName" AvailableCount="@itemCount" NeededCount="cleanCost.Count" />
                                        }
                                    }
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            break;
        default:
            if (this.IsDowngrading)
            {

            }
            else
            {
                var upgradeCosts = this.Game.GetRoomUpgradeCosts(this.Room);
                var itemCosts = upgradeCosts.Items;
                var itemsCount = itemCosts.Where(c => c.Count > 0).Count();
                var timeCost = upgradeCosts.Time;
                var timeCount = 0; // timeCost > 0 ? 1 : 0;
                var laborCost = upgradeCosts.Labor;
                var laborCount = 1; // laborCost > 0 ? 1 : 0;
                var totalCount = itemsCount + timeCount + laborCount;
                colspan = Math.Max(totalCount, 1);

                <div class="row">
                    <div class="col">
                        Consume the following materials to upgrade the facility?
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th scope="col" colspan="@colspan">Materials Needed</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    @{
                                        if (totalCount == 0)
                                        {
                                            <td>No cost. Upgrade is free.</td>
                                        }
                                        else
                                        {
                                            var itemCount = this.Game.GetLaborCount();
                                            var itemName = this.Game.GetLaborName();

                                            <RoomBuildCostEntry Name="@itemName" AvailableCount="@itemCount" NeededCount="laborCount" />

                                            foreach (var cleanCost in itemCosts)
                                            {
                                                itemCount = this.Game.GetItemCount(cleanCost.ItemId);
                                                itemName = this.Game.GetItemName(cleanCost.ItemId);

                                                <RoomBuildCostEntry Name="@itemName" AvailableCount="@itemCount" NeededCount="cleanCost.Count" />
                                            }
                                        }
                                    }
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            break;
    }
}

@code {
    [CascadingParameter] public Game Game { get; set; }
    [CascadingParameter] public Slot Slot { get; set; }
    [CascadingParameter] public Room Room { get; set; }
    [Parameter] public bool IsDowngrading { get; set; }


}
