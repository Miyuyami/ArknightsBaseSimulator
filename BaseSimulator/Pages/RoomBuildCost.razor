@{
    int colspan;
    if (this.IsDowngrading)
    {

    }
    else
    {
        var buildCost = this.Game.GetRoomUpgradeCosts(this.Slot);
        var upgradeCosts = buildCost.Items;
        var itemCosts = buildCost.Items;
        var itemsCount = itemCosts.Where(c => c.Count > 0).Count();
        var timeCost = buildCost.Time;
        var timeCount = 0; // timeCost > 0 ? 1 : 0;
        var laborCost = buildCost.Labor;
        var laborCount = 1; // laborCost > 0 ? 1 : 0;
        var totalCount = itemsCount + timeCount + laborCount;
        colspan = Math.Max(totalCount, 1);

        <div class="row">
            <div class="col">
                Consume the following materials to upgrade the facility?
            </div>
        </div>
        <div class="row">
            <div class="col">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col" colspan="@colspan">Materials Needed</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @{
                                if (totalCount == 0)
                                {
                                    <td>No cost. Upgrade is free.</td>
                                }
                                else
                                {
                                    var itemCount = this.Game.GetLaborCount();
                                    var itemName = this.Game.GetLaborName();

                                    <RoomBuildCostEntry Name="@itemName" AvailableCount="@itemCount" NeededCount="laborCount" />

                                    foreach (var cleanCost in itemCosts)
                                    {
                                        itemCount = this.Game.GetItemCount(cleanCost.ItemId);
                                        itemName = this.Game.GetItemName(cleanCost.ItemId);

                                        <RoomBuildCostEntry Name="@itemName" AvailableCount="@itemCount" NeededCount="cleanCost.Count" />
                                    }
                                }
                            }
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    }
}

@code {
    [CascadingParameter] public Game Game { get; set; }
    [CascadingParameter] public Slot Slot { get; set; }
    [CascadingParameter] public Room Room { get; set; }
    [Parameter] public bool IsDowngrading { get; set; }


}
